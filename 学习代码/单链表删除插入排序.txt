typedef struct student
{
	int data;
	struct student *next;
}node;

//单链表的删除
node *del(node *head,int num)
{
	node *p1,*p2;
	p1 = head;
	while(num != p1->data && p1->next != NULL)   //找到指定删除点
		{p2 = p1; p1 = p1->next;}
	if(num == p1->data)
	{
		if(p1 == head)                         //删除头结点
		{
			head = p1->next;
			free(p1);
		}
		else
		p2->next = p1->next;                 //删除中间节点
	}
	else
		printf("\n%d could not been foud",num);   //为查询到指定节点
		return(head);
}


//单链表插入
node *insert(node *head,int num)
{
	node *p0,*p1,*p2;
	p1 = head;
	p0 = (node *)malloc(sizeof(node));
	p0->data = num;
	while(p0->data > p1-data && p1->next != NULL)
	{
		p2 = p1; p1 = p1->next;	
	}
	if(p0->data <= p1->data)
	{
		if(head == p1)           //首位
		{
			p0->next = p1;
			head = p0;
		}
		else                    //中间
		{
			p2->next = p0;
			p0->next = p1;
		}
	}
	else                      //末尾
	{
		p1->next = p0;
		p0->next = NULL;
	}
}

//单链表排序
node *sort(node *head)
{
	node *p,*p2,*p3;
	int n; int temp;
	n = length(head);
	if(head == NULL || head->next == NULL)
		return head;
	p = head;
	for(int j = 1;j<n;j++)
	{
		p = head;
		for(int i = 0; i < n -j;++i)
		{
			if(p->data > p->next->data)
			{
				temp = p->data;
				p->data = p->next->data;
				p->next->data = temp;
			}
			p = p->next;
		}
	}
	return head;
}

//单链表逆置
node *reverse(node *node)
{
	node *p1,*p2,*p3;
	if(head == NULL || head->next == NULL)
		return;
	p1 = head;
	p2 = p1->next;
	while(p2)
	{
		p3 = p2->next;     //p1->P2->p3
		p2->next = p1;     //p1<-p2
		p1 = p2;       //p1<-p2 
		p2 = p3;       //挪到下一位继续交换
	}
	head->next = NULL;
	head = p1;
	return head;
}















