
//数组求和  线性递归
int sum(int A[],n)
{	
	if(1>n)               //平凡情况，递归基
		return;
	else
		return sum(A,n-1) + A[n-1]; //前n-1项之和，再累计n-1项（n项，数组只到n-1）
}

 //数组倒置 递归算法
    void reverse(int* A,int lo, int hi)     //数组倒置（多递归基递归版）
    {
        if(lo < hi)
        {
            swap(A[lo],A[hi]);
            reverse(A,lo+1,hi-1);      //递归倒置A(lo,hi)
        }
		
		//转换  迭代版
		while(lo < hi)
		{
			swap(A[lo++],A[hi--]);
		}
    }
	
	//数组求和， 二分递归
int sum(int A[],int lo,int hi)
{
    if(lo == hi)
        return A[lo];
    else
    {
        int mi = lo + hi >> 1;
        return sum(A,lo,mi) + sum(A,mi+1,hi);
        
    }
}

//线性递归版 fib()算法
__int64 fib(int n, __int64&prev)
{
    if(0==n)
    {
        prev = 1;
        return 0;
    }
    else
    {
        __int64 prevPrev;
        prev = fib(n -1,prevPrev);
        return prevPrev + prev;
    }
}


//迭代版 Fibonacci数
__int64 fibI(int n)
{
    __int64 f =1, g = 0;
    while (0 < n--) {
        g += f;
        f = g - f;
    }
    return g;
}










